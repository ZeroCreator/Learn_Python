# Битовые операции И, ИЛИ, НЕ, XOR.
# Операция НЕ (~)
print("Операция НЕ (~)")
a = 121
print(bin(a))
print(~a)

d = 0
print(~d)

# Операция И (&)
print("Операция И (&)")
flags = 5
mask = 4
if flags & mask == mask:
    print("Включен второй бит числа")
else:
    print("Второй бит выключен")

flags = 13
mask = 5
flags = flags & ~mask
print(flags)

# Операция ИЛИ (|)
print("Операция ИЛИ (|)")
flags = 8
mask = 5
# flags = flags | mask
flags |= mask
print(flags)


# Операция XOR (исключающее ИЛИ - ^)
print("Операция XOR (исключающее ИЛИ - ^)")
# Удобно переключать биты (для шифрования информации)
flags = 9
mask = 1
flags = flags ^ mask
print(flags)
flags = flags ^ mask
print(flags)


# Смещение бит вправо >> - целочисленное деление на 2
print("Смещение бит вправо >>")
# Смещение бит влево << - умножение на 2
print("Смещение бит влево <<")
x = 160
print(bin(x))
x = x >> 1 # делит исходное число на 2
print(x)
print(bin(x))
x = x >> 2 # делит исходное число на 4
print(x)
x = x >> 2 #
print(x)
x = x >> 1
print(x)
x = x << 1
print(x)
x = x << 3
print(x)

#
print("Tasks")
# На вход программы подается целое десятичное число. Используя битовые операции, включите третий бит введенного числа.
# Выведите на экран полученное числовое значение.
# Sample Input:
# 100
# Sample Output:
# 108
print(int(input()) | 8)

#
print(int(input()) | 0b1000)

# На вход программы подается целое десятичное число. Используя битовые операции, выключите 4-й и 1-й биты
# введенного числа. Выведите на экран полученное числовое значение.
# Sample Input:
# 153
# Sample Output:
# 137
print((int(input()) & ~0b10010))

#
print(int(input()) & ~18)

# На вход программы подается целое десятичное число. Используя битовые операции, переключите 3-й и 0-й биты введенного
# числа. Выведите на экран полученное числовое значение.
# Sample Input:
# 58
# Sample Output:
# 51
print((int(input()) ^ 0b1001))

#
print(int(input()) ^ 9)

# На вход программы подается целое десятичное число. Используя битовые операции, выполните умножение
# введенного числа на 4. Результат отобразите на экране.
# Sample Input:
# 40
# Sample Output:
# 160
print((int(input()) << 2))

# На вход программы подается целое десятичное число. Используя битовые операции, выполните деление введенного числа
# на 2. Результат отобразите на экране.
# Sample Input:
# 22
# Sample Output:
# 11
print((int(input()) >> 1))

# Вводится зашифрованное слово. Шифрование кодов символов этого слова было проведено с помощью
# битовой операции XOR с ключом key=123. То есть, каждый символ был преобразован по алгоритму:
# x = ord(x) ^ key
# Здесь ord - функция, возвращающая код символа x. Расшифруйте введенное слово и выведите его на экран.
# P. S. Подсказка: для преобразования кода в символ используйте функцию chr.
# Sample Input:
# ѩкю[щюлцхZ
# Sample Output:
# Все верно!
print(''.join(map(lambda x: chr(ord(x) ^ 123), input())))

#
print(''.join(chr(ord(c) ^ 123) for c in input()))

#
s = input()
for i in s:
    print(chr(ord(i) ^ 123), end='')

# На вход программы подается целое десятичное число. Используя битовые операции, проверьте, включен ли 6-й и 3-й биты
# введенного числа. Если они оба включены, то выведите слово ДА, иначе - слово НЕТ.
# Sample Input:
# 106
# Sample Output:
# ДА
print(("НЕТ", "ДА")[int(input()) & 0b1001000 == 0b1001000])

#
print('ДА' if int(input()) & 0b1001000 == 0b1001000 else 'НЕТ')

#
n = int(input())
print(("ДА", "НЕТ")[n & (1 << 3) * n & (1 << 6) == 0])

# На вход программы подается целое десятичное число. Используя битовые операции, проверьте, включен ли 5-й или 1-й
# биты введенного числа. Если включен хотя бы один из этих битов, то выведите слово ДА, иначе - слово НЕТ.
# Sample Input:
# 74
# Sample Output:
# ДА
n = int(input())
print("ДА" if n & 0b100000 == 0b100000 or n & 0b10 == 0b10 else "НЕТ")

#
n = int(input())
print(('НЕТ', 'ДА')[not not n & 34])

#
print('ДА' if int(input()) & 0b100010 > 0 else 'НЕТ')

#
n = int(input())
if n & (1 << 1) or n & (1 << 5):
    print('ДА')
else:
    print('НЕТ')